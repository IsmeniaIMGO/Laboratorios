package c_users;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

import a_echotcp.EchoTCPServer;

public class UsersTCPServer {
//	El sistema utiliza un HashMap para almacenar los nombres de los usuarios que han sido registrados
//	y la cantidad de veces que han ingresado luego de su registro inicial.
//	 El sistema inicia inicia esperando la llegada de un cliente.
//	 Cuando se conecta un cliente, el sistema queda esperando la llegada de un mensaje.
//	 Cuando el servidor recibe un mensaje, si inicia con la palabra "LOGIN", extrae el nombre que viene
//	en el mensaje. Si el nombre corresponde a un usuario nuevo, lo registra en el HashMap y responde al
//	cliente con el mensaje "BIENVENIDO fulano, usted es el usuario #n", donde n aumenta a medida
//	que se registran usuarios en el sistema. Si el nombre ya está registrado, se incrementa la cantidad de
//	ingresos al sistema y responde al cliente con el mensaje "Fulano: Usted ha ingresado #k veces al
//	sistema", donde k es la cantidad de veces que ha ingresado al sistema, sin tener en cuenta el registro
//	en el sistema.
	
	public static final int PORT = 3400;
	private ServerSocket listener;
	private Socket serverSideSocket;
	private PrintWriter toNetwork;
	private BufferedReader fromNetwork;
	
	public UsersTCPServer() {
		System.out.println("Echo TCP server is running on port: " + PORT);
	}
	
	public void init() throws Exception {
		listener = new ServerSocket(PORT);
		while (true) {
			serverSideSocket = listener.accept();
			createStreams(serverSideSocket);
			protocol(serverSideSocket);
		}
	}
	
	public void protocol(Socket socket) throws Exception {
		String message = fromNetwork.readLine();
		System.out.println("[Server] From client: " + message);
		
		if (message.charAt(0)=='L'&message.charAt(1)=='O'&
			message.charAt(2)=='G'&message.charAt(3)=='I'& 
			message.charAt(4)=='N') {
			
			String nombre = message.substring(6);
			
		}
		String answer = message;
		toNetwork.println(answer);
	}
	
	private void createStreams(Socket socket) throws Exception {
		toNetwork = new PrintWriter(socket.getOutputStream(), true);
		fromNetwork = new BufferedReader(new InputStreamReader(socket.getInputStream()));
	}
	public static void main(String args[]) throws Exception {
		EchoTCPServer es = new EchoTCPServer();
		es.init();
	}
}
