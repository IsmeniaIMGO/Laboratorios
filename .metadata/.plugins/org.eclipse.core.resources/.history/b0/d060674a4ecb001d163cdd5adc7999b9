package controller;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;

import application.Aplicacion;


public class Servidor {
	
	public static final int PORT = 3400;
	private ServerSocket listener;
	private Socket serverSideSocket;
	private PrintWriter toNetwork;
	private BufferedReader fromNetwork;
	
	Aplicacion aplicacion = new Aplicacion();
	
	public Servidor() {
		System.out.println("Echo TCP server is running on port: " + PORT);
	}
	
	public void init() throws Exception {
		listener = new ServerSocket(PORT);
		while (true) {
			serverSideSocket = listener.accept();
			createStreams(serverSideSocket);
			protocol(serverSideSocket);
		}
	}
	
	public void protocol(Socket socket) throws Exception {
		String message = fromNetwork.readLine();
		System.out.println("[Server] From client: " + message);
		
		if (message != "") {
			
			if (message.equals("1")) {
				try {
						String answer = nombre+ ": Usted ha ingresado " + ingresos+ " veces al sistema";
						toNetwork.println(answer);
					}else {
						usuarios.put(nombre, 1);
						String answer = "BIENVENIDO "+nombre+ " usted es el usuario: "+ contador;
						contador++;
						toNetwork.println(answer);
					}
				} catch (Exception e) {
					String answer = "Error: El comando LOGIN debe ir acompañado del nombre de usuario";
					toNetwork.println(answer);
				}
				
			}else if (comando.equals("INFORME")) {
				String[] nombreUsuarios = usuarios.keySet().toArray(new String[0]);
				String answer = String.join(",", nombreUsuarios);
				toNetwork.println(answer);

			}else if (comando.equals("INFORME_DETALLADO")) {
				StringBuilder informe = new StringBuilder();
				for (String nombre : usuarios.keySet()) {
                    informe.append(nombre + " " + usuarios.get(nombre) + ", ");
				}
				String answer = informe.toString().replaceAll(", $", "");
				toNetwork.println(answer);
				
			}else if (!comando.equals("LOGIN")||!comando.equals("INFORME")||!comando.equals("INFORME_DETALLADO")){
				String answer = "error 400: comando no encontrado";
				toNetwork.println(answer);
			}
		}
	}
	
	private void createStreams(Socket socket) throws Exception {
		toNetwork = new PrintWriter(socket.getOutputStream(), true);
		fromNetwork = new BufferedReader(new InputStreamReader(socket.getInputStream()));
	}
//	public static void main(String args[]) throws Exception {
//		Servidor es = new Servidor();
//		es.init();
//	}
}
